#!/usr/bin/python3

import os
import re
import subprocess
import sys
import util

from optparse import OptionParser

parser = OptionParser()
parser.add_option("-l", "--login-manager", dest="loginmanager",
                  action="store_true",
                  help="use the login manager so that the out-of-box " + \
                       "experience is included")

(options, args) = util.get_options_and_args(parser)

config = util.read_config_from_file()

# TODO: hide compilation output.

HOME = os.path.expanduser("~")
TEST_PATH_KEY = "test_user_profile_path"

test_user_profile_path = config[TEST_PATH_KEY] if TEST_PATH_KEY in config else None
if not test_user_profile_path:
  test_user_profile_path = os.path.join(HOME, "tmp", "test-sandbox")
gn_args = util.common_gn_args() + [
  'target_os = "chromeos"',
  'is_component_build = true',
]

util.ensure_goma_installed()

os.chdir(os.path.join(HOME, "chromium", "src"))
cmd = "gn gen " + util.get_out_dir() + " --args='" + " ".join(gn_args) + "'"
status_code = util.run(cmd, "Preparing to build...", options)
if status_code != 0:
  print("gn step failed, aborting.")
  sys.exit(status_code)

cmd = ("autoninja -C " + util.get_out_dir() + " chrome chrome_sandbox")
status_code = util.run(cmd, "Compiling, this may take a while", options)
if status_code != 0:
  print("Compilation failed, aborting.")
  if not options.verbose:
    print("Please use -v to see failures.")
  sys.exit(status_code)

sbin_target = "/usr/local/sbin/chrome-devel-sandbox"
if not os.path.exists(sbin_target):
  os.system("sudo cp " + util.get_out_dir() + "/chrome_sandbox " + sbin_target)
  os.system("sudo chown root:root /usr/local/sbin/chrome-devel-sandbox")
  os.system("sudo chmod 4755 /usr/local/sbin/chrome-devel-sandbox")

#TODO: Make the data dir configurable
# --ash-debug-shortcuts allows Ctrl-Alt_Shift-T for switching to tablet
# mode.
cmd = util.get_out_dir() + "/chrome --user-data-dir=" + test_user_profile_path + \
    (" --login-manager" if options.loginmanager else "") + \
    (" --ash-debug-shortcuts") + \
    (" --use-first-display-as-internal") + \
    (" " + config["extra_flags"] if "extra_flags" in config else "") + \
    (" --enable-features=" + ",".join(config["enabled_features"].split(",")) if "enabled_features" in config else "")
message = ("Running chrome, a new window will open. "
           "Use Ctrl-Alt-Shift-T for tablet mode. ")
# Some other options to consider:
# --touch-devices=[get ID from 'xinput list']
# --force-device-scale-factor=0.75
# --ui-slow-animations
# --animation-duration-scale
if not options.verbose:
  message += "Re-run with '--verbose' to show debug output."
util.run(cmd, message, options)
