#!/usr/bin/python3

import getpass
import os
import socket
import sys
import util

from optparse import OptionParser

DEPOT_TOOLS = "depot_tools"
TRY_VERBOSE_MESSAGE = ("Please try calling me again with the verbose (-v) "
                       "option to see what's going on.")

parser = OptionParser()
parser.add_option("-f", "--full-history", dest="history",
                  action="store_true",
                  help="Download the full repo history (longer fetch)")

(options, args) = util.get_options_and_args(parser)

def refresh_sudo():
  os.system("sudo ls > /dev/null")

# Base variables

HOME = os.path.expanduser("~")
BASE_DIR = os.path.join(HOME, "chromium")
dir_name = ""

if not util.is_online():
  print("You seem to be offline. I won't be able to do much. Aborting.")
  sys.exit(1)

refresh_sudo()

os.chdir(HOME)

# Fetch depot_tools

if os.path.exists(DEPOT_TOOLS):
  print(DEPOT_TOOLS + " is already checked out, updating it...")
  os.chdir(DEPOT_TOOLS)
  os.system("git pull")
  os.chdir("..")
else:
  print("Fetching " + DEPOT_TOOLS + "...")
  util.system_silent("git clone "
                     "https://chromium.googlesource.com/chromium/tools/depot_tools.git",
                     options)

if not os.path.exists(DEPOT_TOOLS):
  print("I wasn't able to fetch the depot tools. Aborting. Potential fix: delete your ~/.gitcookies")
  if not options.verbose:
    print(TRY_VERBOSE_MESSAGE)
  sys.exit(1)

refresh_sudo()

# Create base directory

if not os.path.exists(BASE_DIR):
  os.mkdir(BASE_DIR)

# Print info about PATH

shell = os.environ['SHELL'].rsplit('/', 1) [-1]
rc_file = os.path.join(HOME, "." + shell + "rc")
rc_file_contents = open(rc_file, "r").read()
if "depot_tools" not in rc_file_contents:
  print("We recommend adding this line to your file '" + rc_file + "':\n")
  new_path = "PATH=$PATH:" + os.path.join(HOME, "depot_tools")
  if shell == 'bash':
    print("\t" + new_path + "\n")
  else:
    print("\texport " + new_path + "\n")

refresh_sudo()

# Fetch the source code

os.chdir(BASE_DIR)

if os.path.exists(".gclient") and not os.path.exists("src"):
  print("I see remnants of a checkout attempt, but no checkout. " + \
      "I am going to delete the .gclient directory.")
  os.system("rm -rf .gclient")

if os.path.exists("src"):
  print("Code seems already checked out, skipping that part.")
else:
  flags = ["--nohooks"]
  if not options.history:
    flags.append("--no-history")
  fetch_command = "" + os.path.join(HOME, DEPOT_TOOLS, "fetch") + " " + \
      " ".join(flags) + " " + "chromium"
  util.run(fetch_command, "Fetching the source code...", options)

if not os.path.exists("src"):
  print("Fetching the code has failed, aborting. Sorry about that. ")
  if not options.verbose:
    print(TRY_VERBOSE_MESSAGE)
  sys.exit(1)

refresh_sudo()

# Now for a (hopefully) temporary fix.
os.chdir(BASE_DIR)
os.system("echo 'target_os=[\"chromeos\"]' >> .gclient")
os.chdir("src")
# Opt into metrics to avoid seeing the annoying message
os.system("gclient metrics --opt-in")
os.system("gclient sync")

util.ensure_goma_installed()
refresh_sudo()

# Run the hooks

os.chdir(BASE_DIR)
os.chdir("src")
cmd = "build/install-build-deps.sh --no-prompt"
util.run(cmd, "Installing build deps...", options)

util.run("gclient runhooks", "Running the hooks...", options)

# Configure the user email

os.system("git config user.email " + getpass.getuser() + "@chromium.org")

# Build

sc = util.run("gn gen " + util.get_out_dir() + " --args='" + " ".join(util.common_gn_args()) + "'",
    "Preparing for the first build...", options)
if sc != 0:
  print("gn step failed, aborting.")
  sys.exit(sc)

sc = util.run("autoninja -C " + util.get_out_dir() + " chrome", "Doing the first build...", options)
# TODO: Catch Ctrl-C, abort cleanly.
if sc != 0:
  print("Compilation failed, aborting.")
  sys.exit(sc)

# The end

print("\nAll done! Your Chromium directory is " + BASE_DIR)
