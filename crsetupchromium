#!/usr/bin/python3

import getpass
import os
import socket
import sys
import crutil

from optparse import OptionParser

TRY_VERBOSE_MESSAGE = (
    "Please try calling me again with the verbose (-v) "
    "option to see what's going on."
)

parser = OptionParser()
parser.add_option(
    "-f",
    "--full-history",
    dest="history",
    action="store_true",
    help="Download the full repo history (longer fetch)",
)

(options, args) = crutil.get_options_and_args(parser)


def refresh_sudo():
    os.system("sudo ls > /dev/null")


# Base variables

HOME = os.path.expanduser("~")
BASE_DIR = os.path.join(HOME, "chromium")
dir_name = ""

if not crutil.is_online():
    print("You seem to be offline. I won't be able to do much. Aborting.")
    sys.exit(1)

refresh_sudo()

os.chdir(HOME)

# Fetch depot_tools

fetched = crutil.ensure_depot_tools(options)
if not fetched:
    if not options.verbose:
        print(TRY_VERBOSE_MESSAGE)
    sys.exit(1)

refresh_sudo()

# Create base directory

if not os.path.exists(BASE_DIR):
    os.mkdir(BASE_DIR)

# Print info about PATH

shell = os.environ["SHELL"].rsplit("/", 1)[-1]
rc_file = os.path.join(HOME, "." + shell + "rc")
rc_file_contents = open(rc_file, "r").read()
if "depot_tools" not in rc_file_contents:
    print("We recommend adding this line to your file '" + rc_file + "':\n")
    new_path = "PATH=$PATH:" + os.path.join(HOME, "depot_tools")
    if shell == "bash":
        print("\t" + new_path + "\n")
    else:
        print("\texport " + new_path + "\n")

refresh_sudo()

# Fetch the source code

os.chdir(BASE_DIR)

if os.path.exists(".gclient") and not os.path.exists("src"):
    print(
        "I see remnants of a checkout attempt, but no checkout. "
        + "I am going to delete the .gclient directory."
    )
    os.system("rm -rf .gclient")

if os.path.exists("src"):
    print("Code seems already checked out, skipping that part.")
else:
    flags = ["--nohooks"]
    if not options.history:
        flags.append("--no-history")
    fetch_command = (
        ""
        + os.path.join(HOME, "depot_tools", "fetch")
        + " "
        + " ".join(flags)
        + " "
        + "chromium"
    )
    crutil.run(fetch_command, "Fetching the source code...", options)

if not os.path.exists("src"):
    crutil.print_failure("Fetching the code has failed, aborting. Sorry about that.")
    if not options.verbose:
        print(TRY_VERBOSE_MESSAGE)
    sys.exit(1)

refresh_sudo()

# Now for a (hopefully) temporary fix.
os.chdir(BASE_DIR)
os.system("echo 'target_os=[\"chromeos\"]' >> .gclient")
os.chdir("src")
# Opt into metrics to avoid seeing the annoying message
os.system("gclient metrics --opt-in")
os.system("gclient sync")

crutil.ensure_goma_installed()
refresh_sudo()

# Run the hooks

os.chdir(BASE_DIR)
os.chdir("src")
cmd = "build/install-build-deps.sh --no-prompt"
crutil.run(cmd, "Installing build deps...", options)

crutil.run("gclient runhooks", "Running the hooks...", options)

# Configure the user email

os.system("git config user.email " + getpass.getuser() + "@chromium.org")

# Build

sc = crutil.run(
    "gn gen "
    + crutil.get_out_dir()
    + " --args='"
    + " ".join(crutil.common_gn_args())
    + "'",
    "Preparing for the first build...",
    options,
)
if sc != 0:
    crutil.print_failure("gn step failed, aborting.")
    sys.exit(sc)

sc = crutil.run(
    "autoninja -C " + crutil.get_out_dir() + " chrome",
    "Doing the first build...",
    options,
)
# TODO: Catch Ctrl-C, abort cleanly.
if sc != 0:
    crutil.print_failure("Compilation failed, aborting.")
    sys.exit(sc)

# The end

print("\nAll done! Your Chromium directory is " + BASE_DIR)
